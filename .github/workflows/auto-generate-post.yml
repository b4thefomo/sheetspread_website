name: Auto Generate Blog Post

on:
  schedule:
    # Runs at 00:00 and 12:00 UTC every day (twice daily)
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  generate-post:
    runs-on: ubuntu-latest
    
    # Prevent multiple instances from running simultaneously
    concurrency:
      group: generate-post
      cancel-in-progress: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check content calendar status
        id: check-calendar
        run: |
          echo "Checking for posts to generate..."
          NEXT_POST=$(node -e "
            const fs = require('fs');
            const calendar = JSON.parse(fs.readFileSync('./content-calendar.json', 'utf-8'));
            const nextPost = calendar.posts.find(p => !p.status || p.status !== 'Done');
            if (nextPost) {
              console.log('FOUND');
              console.log('POST_ID=' + nextPost.id);
            } else {
              console.log('NONE');
            }
          ")
          
          if [[ "$NEXT_POST" == *"FOUND"* ]]; then
            echo "has_post=true" >> $GITHUB_OUTPUT
            POST_ID=$(echo "$NEXT_POST" | grep "POST_ID=" | cut -d'=' -f2)
            echo "post_id=$POST_ID" >> $GITHUB_OUTPUT
            echo "üìù Found post to generate: $POST_ID"
          else
            echo "has_post=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All posts are already generated"
          fi
          
      - name: Generate blog post content
        if: steps.check-calendar.outputs.has_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "üöÄ Generating post: ${{ steps.check-calendar.outputs.post_id }}"
          node scripts/createNextPost.js
          
      - name: Verify generation success
        if: steps.check-calendar.outputs.has_post == 'true'
        id: verify
        run: |
          POST_ID="${{ steps.check-calendar.outputs.post_id }}"
          
          # Check if files were created
          if [ -f "content/${POST_ID}.md" ]; then
            echo "‚úÖ Markdown file created: content/${POST_ID}.md"
            echo "markdown_created=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Markdown file not found"
            echo "markdown_created=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -f "public/${POST_ID}.jpeg" ]; then
            echo "‚úÖ Image file created: public/${POST_ID}.jpeg"
            echo "image_created=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Image file not found (may have failed)"
            echo "image_created=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        if: steps.check-calendar.outputs.has_post == 'true' && steps.verify.outputs.markdown_created == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add all changes
          git add -A
          
          # Create commit message
          POST_ID="${{ steps.check-calendar.outputs.post_id }}"
          COMMIT_MSG="ü§ñ Auto-generated blog post: ${POST_ID}

          - Generated content for ${POST_ID}
          - Created markdown file and image
          - Applied content sanitization
          - Added internal links and resources
          - Updated content calendar status

          Generated by GitHub Actions workflow"
          
          # Commit changes
          git commit -m "$COMMIT_MSG" || {
            echo "No changes to commit"
            exit 0
          }
          
          # Push to main branch
          git push origin main
          
      - name: Build and test site
        if: steps.check-calendar.outputs.has_post == 'true' && steps.verify.outputs.markdown_created == 'true'
        run: |
          echo "üî® Building site to verify changes..."
          npm run build
          
      - name: Send success notification
        if: steps.check-calendar.outputs.has_post == 'true' && steps.verify.outputs.markdown_created == 'true'
        run: |
          echo "‚úÖ Successfully generated post: ${{ steps.check-calendar.outputs.post_id }}"
          echo "üìä Summary:"
          echo "  - Markdown: ${{ steps.verify.outputs.markdown_created }}"
          echo "  - Image: ${{ steps.verify.outputs.image_created }}"
          echo "  - Build: Success"
          
      - name: Handle generation failure
        if: failure() && steps.check-calendar.outputs.has_post == 'true'
        run: |
          echo "‚ùå Failed to generate post: ${{ steps.check-calendar.outputs.post_id }}"
          echo "Check the logs above for error details"
          
      - name: Log failure details
        if: failure() && steps.check-calendar.outputs.has_post == 'true'
        run: |
          echo "::error::Failed to generate post: ${{ steps.check-calendar.outputs.post_id }}"
          echo "‚ùå Generation failed for post: ${{ steps.check-calendar.outputs.post_id }}"
          echo "üìã Details:"
          echo "  - Markdown created: ${{ steps.verify.outputs.markdown_created || 'unknown' }}"
          echo "  - Image created: ${{ steps.verify.outputs.image_created || 'unknown' }}"
          echo ""
          echo "To manually generate, run:"
          echo "  npm run create-post"